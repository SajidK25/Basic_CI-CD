name: CI/CD for fsitsevice.com

on:
  push:
    branches:
      - dev

env:
  IMAGE_NAME: mezbauddin.com
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SERVER_HOST: ${{ secrets.VPS_IP_ADRESS }}
  SERVER_USERNAME: ${{ secrets.SSH_USERNAME }}
  SERVER_PASSWORD: ${{ secrets.SSH_PASSWORD }}
#   TFE_TOKEN: ${{ secrets.TF_CLOUD_TOKEN }}
#   SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#   TARGET_DOMAIN: ${{ secrets.TARGET_DOMAIN }}


jobs:
  build-push-deploy-provision:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image and Push
        run: |
            docker compose -f docker-compose.dev.yml build
            docker compose -f docker-compose.dev.yml push

    #   - name: Push Docker Image
    #     uses: docker/build-push-action@v2
    #     with:
    #       context: .
    #       push: true
    #       tags: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Login to Server/VPS/VM/Drolet
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.VPS_IP_ADRESS }}
            username: ${{ secrets.SSH_USERNAME }}
            password: ${{ secrets.SSH_PASSWORD }}

      - name: Deploy to Digital ocean droplet.
        run: |
        
          # echo "$DOCKER_PASSWORD" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin && \

          if [[ "refs/heads/dev" == "refs/heads/dev" ]]; then
            COMPOSE_FILE=docker-compose.yml
          else
            COMPOSE_FILE=docker-compose.dev.yml
          fi        
          echo "Using Docker Compose file: $COMPOSE_FILE" && \
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker-compose -f $COMPOSE_FILE down || true && \
          docker-compose -f $COMPOSE_FILE pull && \
          docker-compose -f $COMPOSE_FILE up -d        

          
    #   - name: Update DNS Record for Root of Target Domain
    #     run: |
    #       HTTP_RESPONSE_CODE=$(curl -X PUT -s -o /dev/null -w "%{http_code}" "https://api.godaddy.com/v1/domains/${{ secrets.TARGET_DOMAIN }}/records/A/@?ttl=600" \
    #         -H "Authorization: sso-key ${{ secrets.GODADDY_API_KEY }}:${{ secrets.GODADDY_API_SECRET }}" \
    #         -H "Content-Type: application/json" \
    #         -d '[
    #           {
    #             "data": "${{ env.SERVER_HOST }}",
    #             "port": 80,
    #             "priority": 10,
    #             "protocol": "tcp",
    #             "service": "http",
    #             "ttl": 600,
    #             "weight": 1
    #           }
    #         ]')
      
    #         if [ -n "$HTTP_RESPONSE_CODE" ]; then
    #           if [ "$HTTP_RESPONSE_CODE" -eq 200 ]; then
    #             echo "DNS record update successful."
    #           else
    #             echo "DNS record update failed with HTTP response code: $HTTP_RESPONSE_CODE"
    #           fi
    #         else
    #           echo "Failed to retrieve an HTTP response code. Check your API request."
    #         fi